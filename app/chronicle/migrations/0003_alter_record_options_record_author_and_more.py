# Generated by Django 5.0.4 on 2024-05-06 11:43

import django.core.validators
import django.db.models.deletion
import django_ckeditor_5.fields
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chronicle', '0002_alter_record_options'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='record',
            options={'ordering': ['-time_create'], 'verbose_name': 'Запись', 'verbose_name_plural': 'Записи'},
        ),
        migrations.AddField(
            model_name='record',
            name='author',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='author_records', to=settings.AUTH_USER_MODEL, verbose_name='Автор'),
        ),
        migrations.AddField(
            model_name='record',
            name='short_description',
            field=django_ckeditor_5.fields.CKEditor5Field(default='DELETE THIS', max_length=500, verbose_name='Краткое описание'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='record',
            name='slug',
            field=models.SlugField(blank=True, max_length=255, unique=True, verbose_name='URL'),
        ),
        migrations.AddField(
            model_name='record',
            name='thumbnail',
            field=models.ImageField(blank=True, upload_to='images/thumbnails/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=('png', 'jpg', 'webp', 'jpeg', 'gif'))], verbose_name='Превью поста'),
        ),
        migrations.AddField(
            model_name='record',
            name='updater',
            field=models.ManyToManyField(blank=True, related_name='updaters_records', to=settings.AUTH_USER_MODEL, verbose_name='Обновили'),
        ),
        migrations.AlterModelTable(
            name='record',
            table='app_records',
        ),
        migrations.CreateModel(
            name='ThroughPeopleTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chronicle.record')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='record',
            name='tags_people',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='chronicle.ThroughPeopleTag', to='taggit.Tag', verbose_name='Люди'),
        ),
        migrations.CreateModel(
            name='ThroughPlacesTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chronicle.record')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='record',
            name='tags_places',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='chronicle.ThroughPlacesTag', to='taggit.Tag', verbose_name='Места'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['-time_create', 'status'], name='app_records_time_cr_f8cadd_idx'),
        ),
    ]
